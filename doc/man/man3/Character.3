.TH "Character" 3 "Hunter-Assassin PROJECT" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Character \- Class representing a character in the game\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <Character\&.h>\fP
.PP
Inherited by \fB_Garde\fP, and \fB_Player\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCharacter\fP (\fBRect\fP *\fBsource\fP, \fBRect\fP *\fBdest\fP, int \fBdirection\fP, int \fBhealth\fP, const char *\fBtheSpritePath\fP, \fBRect\fP *_targetPos, int _speed, std::vector< \fBPosition\fP > _tabNoeud)"
.br
.RI "Constructor for the \fBCharacter\fP class\&. "
.ti -1c
.RI "\fBCharacter\fP ()=default"
.br
.RI "Default constructor for the \fBCharacter\fP class\&. "
.ti -1c
.RI "\fB~Character\fP ()"
.br
.RI "Destructor for the \fBCharacter\fP class\&. "
.ti -1c
.RI "void \fBmakeAnimation\fP (int index, \fBPosition\fP tabPos[]) const"
.br
.ti -1c
.RI "void \fBWalkingAnimation\fP (\fBPosition\fP tabPos[], int \fBspeed\fP, int indexClips, int \fBdirection\fP)"
.br
.ti -1c
.RI "void \fBUP\fP (int idxAtt)"
.br
.ti -1c
.RI "void \fBLEFT\fP (int idxAtt)"
.br
.ti -1c
.RI "void \fBRIGHT\fP (int idxAtt)"
.br
.ti -1c
.RI "void \fBDOWN\fP (int idxAtt)"
.br
.ti -1c
.RI "void \fBupdateArrowPos\fP ()"
.br
.ti -1c
.RI "void \fBloadClips\fP ()"
.br
.ti -1c
.RI "void \fBcreateArrow\fP (int direct)"
.br
.RI "Moves the player to the left on the specified map\&. "
.ti -1c
.RI "void \fBgoLeft\fP () const"
.br
.ti -1c
.RI "void \fBgoRight\fP () const"
.br
.RI "Moves the player to the right on the specified map\&. "
.ti -1c
.RI "void \fBgoUp\fP () const"
.br
.RI "Moves the player upward on the specified map\&. "
.ti -1c
.RI "void \fBgoDown\fP () const"
.br
.RI "Moves the player downward on the specified map\&. "
.ti -1c
.RI "int \fBgetHealth\fP () const"
.br
.RI "Gets the health points of the player\&. "
.ti -1c
.RI "void \fBsetHealth\fP (int _health)"
.br
.RI "Sets the health points of the player\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBAttackInit\fP (\fBPosition\fP tabPos[], int index)"
.br
.ti -1c
.RI "static void \fBWalk\fP (\fBPosition\fP tabPos[], int index)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "int \fBhealth\fP"
.br
.RI "Health points of the character\&. "
.ti -1c
.RI "\fBRect\fP * \fBdest\fP"
.br
.RI "Destination rectangle for rendering\&. "
.ti -1c
.RI "\fBRect\fP * \fBsource\fP"
.br
.RI "Source rectangle for rendering\&. "
.ti -1c
.RI "\fBRect\fP * \fBtargetPos\fP"
.br
.RI "Target position for the character\&. "
.ti -1c
.RI "int \fBdirection\fP {}"
.br
.ti -1c
.RI "std::vector< \fBArrow\fP > \fBlistArrow\fP"
.br
.ti -1c
.RI "char \fBshootKey\fP"
.br
.RI "Key used for shooting\&. "
.ti -1c
.RI "int \fBspeed\fP"
.br
.RI "Movement speed of the character\&. "
.ti -1c
.RI "const char * \fBtheSpritePath\fP"
.br
.RI "Path to the sprite image file\&. "
.ti -1c
.RI "std::vector< \fBPosition\fP > \fBtabNoeud\fP"
.br
.RI "Vector of positions for character pathfinding\&. "
.ti -1c
.RI "\fBPosition\fP \fBplayer_left_clips\fP [9] {}"
.br
.ti -1c
.RI "\fBPosition\fP \fBplayer_right_clips\fP [9] {}"
.br
.ti -1c
.RI "\fBPosition\fP \fBplayer_up_clips\fP [9] {}"
.br
.ti -1c
.RI "\fBPosition\fP \fBplayer_down_clips\fP [9] {}"
.br
.ti -1c
.RI "\fBPosition\fP \fBattackUp\fP [13] {}"
.br
.ti -1c
.RI "\fBPosition\fP \fBattackLeft\fP [13] {}"
.br
.ti -1c
.RI "\fBPosition\fP \fBattackDown\fP [13] {}"
.br
.ti -1c
.RI "\fBPosition\fP \fBattackRight\fP [13] {}"
.br
.ti -1c
.RI "\fBPosition\fP \fBPlayerHurtClips\fP [7]"
.br
.ti -1c
.RI "bool \fBcanShootNow\fP = false"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class representing a character in the game\&. 

This class encapsulates the properties and behaviors of a character, such as movement, animation, health, and attacking\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Character::Character (\fBRect\fP * source, \fBRect\fP * dest, int direction, int health, const char * theSpritePath, \fBRect\fP * _targetPos, int _speed, std::vector< \fBPosition\fP > _tabNoeud)"

.PP
Constructor for the \fBCharacter\fP class\&. Initializes a character with the specified attributes\&.
.PP
\fBParameters\fP
.RS 4
\fIsource\fP The source rectangle for rendering\&. 
.br
\fIdest\fP The destination rectangle for rendering\&. 
.br
\fIdirection\fP The initial direction of the character\&. 
.br
\fIhealth\fP The initial health points of the character\&. 
.br
\fItheSpritePath\fP The path to the sprite image file\&. 
.br
\fI_targetPos\fP The target position for the character\&. 
.br
\fI_speed\fP The movement speed of the character\&. 
.br
\fI_tabNoeud\fP The vector of positions for character pathfinding\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Character::createArrow (int direct)"

.PP
Moves the player to the left on the specified map\&. 
.PP
\fBParameters\fP
.RS 4
\fImap\fP The map on which the player moves\&. 
.RE
.PP

.SS "int Character::getHealth () const\fR [inline]\fP"

.PP
Gets the health points of the player\&. l'utilisation de [[nodiscard]] permet de signaler explicitement que la valeur de retour d'une fonction est significative et doit Ãªtre prise en compte par le code appelan 
.PP
\fBReturns\fP
.RS 4
The health points of the player\&.
.PP
The health points of the player\&. 
.RE
.PP

.SS "void Character::goDown () const"

.PP
Moves the player downward on the specified map\&. 
.PP
\fBParameters\fP
.RS 4
\fImap\fP The map on which the player moves\&. 
.RE
.PP

.SS "void Character::goRight () const"

.PP
Moves the player to the right on the specified map\&. 
.PP
\fBParameters\fP
.RS 4
\fImap\fP The map on which the player moves\&. 
.RE
.PP

.SS "void Character::goUp () const"

.PP
Moves the player upward on the specified map\&. 
.PP
\fBParameters\fP
.RS 4
\fImap\fP The map on which the player moves\&. 
.RE
.PP

.SS "void Character::setHealth (int _health)\fR [inline]\fP"

.PP
Sets the health points of the player\&. 
.PP
\fBParameters\fP
.RS 4
\fI_health\fP The new health points\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBPosition\fP Character::attackDown[13] {}"
Array of positions for attacking downwards animation\&. 
.SS "\fBPosition\fP Character::attackLeft[13] {}"
Array of positions for attacking left animation\&. 
.SS "\fBPosition\fP Character::attackRight[13] {}"
Array of positions for attacking right animation\&. 
.SS "\fBPosition\fP Character::attackUp[13] {}"
Array of positions for attacking upwards animation\&. 
.SS "int Character::direction {}"
Direction indicators of the character\&. 
.SS "std::vector<\fBArrow\fP> Character::listArrow"
List of arrows associated with the character\&. 
.SS "\fBPosition\fP Character::player_down_clips[9] {}"
Array of positions for down movement animation\&. 
.SS "\fBPosition\fP Character::player_left_clips[9] {}"
Array of positions for left movement animation\&. 
.SS "\fBPosition\fP Character::player_right_clips[9] {}"
Array of positions for right movement animation\&. 
.SS "\fBPosition\fP Character::player_up_clips[9] {}"
Array of positions for up movement animation\&. 
.SS "\fBPosition\fP Character::PlayerHurtClips[7]"
Array of positions for the hurt animation\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Hunter-Assassin PROJECT from the source code\&.
